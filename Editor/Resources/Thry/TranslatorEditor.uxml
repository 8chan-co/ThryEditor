<ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="True">
    <Style src="project://database/Assets/_PoiyomiShaders/Scripts/ThryEditor/Editor/Resources/Thry/TranslatorEditorStyles.uss?fileID=7433441132597879392&amp;guid=00f87086e8d71f94f9948fb25a8321cf&amp;type=3#TranslatorEditorStyles" />
    <ui:VisualElement class="section" style="flex-grow: 1;">
        <ui:TextField picking-mode="Ignore" label="Translation Name" binding-path="Name" />
    </ui:VisualElement>
    <ui:VisualElement name="originShaderContainer" class="section" style="flex-grow: 1;">
        <ui:VisualElement name="shaderSelectionContainer" class="padding-vertical" style="flex-grow: 0; flex-direction: row;">
            <ui:TextField picking-mode="Ignore" label="Origin Shader Name" binding-path="OriginShader" name="shaderText" style="flex-grow: 1; margin-right: 0;" />
            <ui:DropdownField name="shaderDropdown" class="icon-only-dropdown" style="margin-left: 0; margin-right: 0;" />
        </ui:VisualElement>
        <ui:TextField picking-mode="Ignore" label="Origin Shader Regex" binding-path="OriginShaderRegex" name="shaderRegexText" />
        <ui:Toggle label="Match Using Regex" binding-path="MatchOriginShaderBasedOnRegex" name="shaderRegexToggle" />
    </ui:VisualElement>
    <ui:VisualElement name="targetShaderContainer" class="section" style="flex-grow: 1;">
        <ui:VisualElement name="shaderSelectionContainer" class="padding-vertical" style="flex-grow: 0; flex-direction: row;">
            <ui:TextField picking-mode="Ignore" label="Target Shader" binding-path="TargetShader" name="shaderText" style="flex-grow: 1; margin-right: 0;" />
            <ui:DropdownField name="shaderDropdown" class="icon-only-dropdown" style="margin-left: 0; margin-right: 0;" />
        </ui:VisualElement>
        <ui:TextField picking-mode="Ignore" label="Target Shader Regex" binding-path="TargetShaderRegex" name="shaderRegexText" />
        <ui:Toggle label="Match Using Regex" binding-path="MatchTargetShaderBasedOnRegex" name="shaderRegexToggle" />
    </ui:VisualElement>
    <ui:VisualElement class="section" style="flex-grow: 1;">
        <ui:Foldout text="Properties" class="foldout-inline">
            <ui:VisualElement class="list-header-columns" style="flex-grow: 1; flex-direction: row; padding-left: 0; padding-right: 0; padding-top: 0; padding-bottom: 0; margin-bottom: 1px; border-left-color: rgba(0, 0, 0, 0.58); border-right-color: rgba(0, 0, 0, 0.58); border-top-color: rgba(0, 0, 0, 0.58); border-bottom-color: rgba(0, 0, 0, 0.58);">
                <ui:Label tabindex="-1" text="Source" parse-escape-sequences="true" display-tooltip-when-elided="true" enable-rich-text="false" style="flex-grow: 1; flex-shrink: 1; width: auto; margin-left: 33px;" />
                <ui:Label tabindex="-1" text="Target" parse-escape-sequences="true" display-tooltip-when-elided="true" enable-rich-text="false" style="flex-grow: 1; flex-shrink: 1; width: auto; margin-left: 33px;" />
                <ui:Label tabindex="-1" text="Math Expression" parse-escape-sequences="true" display-tooltip-when-elided="true" enable-rich-text="false" name="Label" style="flex-grow: 1; flex-shrink: 1; width: auto; margin-left: 33px;" />
            </ui:VisualElement>
            <ui:ListView reorderable="true" show-bound-collection-size="false" reorder-mode="Animated" show-alternating-row-backgrounds="All" binding-path="PropertyTranslations" show-border="true" virtualization-method="DynamicHeight" name="propertyList" show-add-remove-footer="true" />
        </ui:Foldout>
    </ui:VisualElement>
    <ui:Foldout text="Help" value="false" class="foldout-inline section">
        <ui:Label tabindex="-1" text="Property translations are a little quirky so I&apos;ll try explain how everything works here.&#10;&#10;On the left we have the &lt;b&gt;Source&lt;/b&gt; property name, then the &lt;b&gt;Target&lt;/b&gt; property name. &#10;The value from the source property will be copied to the target property in the target shader. &#10;Optionally we can use a &lt;b&gt;Math Expression&lt;/b&gt; to transform the value in some way. The value can be substituted with x. For example, an expression of x+1 will return the value of our shader property + 1. &#10;&lt;b&gt;Math Expressions&lt;/b&gt; use Unity&apos;s &lt;b&gt;ExpressionEvaluator&lt;/b&gt;, which means they support math operations and functions such as round(x) and abs(x), check Unity docs for more info.&#10;&#10;To the right of the expression we have a checkbox which enables conditional expressions. If conditionals are enabled, the &lt;b&gt;Math Expression&lt;/b&gt; field in line with the properties is ignored.&#10;There are two choices of conditionals, an &lt;b&gt;if&lt;/b&gt; and an &lt;b&gt;else&lt;/b&gt;. &lt;b&gt;If&lt;/b&gt; blocks can do math (+, -, /, *, %, ^), use parenthesis and conditional expressions (==, !=, &gt;, &gt;=, &lt;, &lt;=, &amp;&amp;, ||) and need to evaluate to true to return their expression. The value can be substituted with x here too.&#10;For example if our property has a value of 3 and we want it to be set to 4 &lt;b&gt;if&lt;/b&gt; 3 &lt;b&gt;then&lt;/b&gt; 4.&#10;If we want all values over 4 to be set to 0 we can use &lt;b&gt;if&lt;/b&gt; x &gt;= 4 &lt;b&gt;then&lt;/b&gt; 0&#10;&#10;If we don&apos;t specify an expression but only a number like: &lt;b&gt;if&lt;/b&gt; 4, it&apos;s implied that we mean &lt;b&gt;if&lt;/b&gt; x == 4.&#10;&#10;An &lt;b&gt;else&lt;/b&gt; block doesn&apos;t have a condition, it always returns its expression." parse-escape-sequences="true" display-tooltip-when-elided="true" style="white-space: normal;" />
    </ui:Foldout>
</ui:UXML>
